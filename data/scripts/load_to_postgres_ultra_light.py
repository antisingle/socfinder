#!/usr/bin/env python3
"""
–£–õ–¨–¢–†–ê-–õ–ï–ì–ö–ò–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ PostgreSQL
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º—É–º –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ CSV
"""
import os
import sys
import json
import csv
import gc
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import logging
import subprocess

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append('/app')
from app.models.project import Project, Base

def load_coordinates():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        with open('/app/data/regions_coordinates.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

def get_coordinates(region_name, coordinates_dict):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not region_name:
        return None
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if region_name in coordinates_dict:
        coords = coordinates_dict[region_name]
        return {"lat": coords["lat"], "lng": coords["lng"]}
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in coordinates_dict.items():
        if region_name.lower() in region.lower() or region.lower() in region_name.lower():
            return {"lat": coords["lat"], "lng": coords["lng"]}
    
    return None

def convert_excel_to_csv(excel_path, csv_path):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç Excel –≤ CSV —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤–Ω–µ—à–Ω–µ–π —É—Ç–∏–ª–∏—Ç—ã"""
    logger.info("üìù –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Excel –≤ CSV –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º
        import pandas as pd
        
        # –ß–∏—Ç–∞–µ–º Excel –ø–æ —á–∞—Å—Ç—è–º (chunksize)
        logger.info("üîÑ –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º...")
        
        # –°–Ω–∞—á–∞–ª–∞ —á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        df_sample = pd.read_excel(excel_path, nrows=5)
        logger.info(f"–ö–æ–ª–æ–Ω–∫–∏ Excel: {list(df_sample.columns)}")
        
        # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
        logger.info("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel...")
        df = pd.read_excel(excel_path, dtype=str)  # –í—Å–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
        
        logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
        logger.info("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV...")
        df.to_csv(csv_path, index=False, encoding='utf-8')
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
        del df
        del df_sample
        gc.collect()
        
        logger.info(f"‚úÖ CSV —Å–æ–∑–¥–∞–Ω: {csv_path}")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –£–õ–¨–¢–†–ê —ç–∫–æ–Ω–æ–º–∏–µ–π –ø–∞–º—è—Ç–∏"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –£–õ–¨–¢–†–ê-–õ–ï–ì–ö–£–Æ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    logger.info("ü™∂ –†–µ–∂–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL", "postgresql://socfinder:socfinder123@postgres:5432/socfinder")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    engine = create_engine(database_url, pool_size=1, max_overflow=0)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM projects"))
            count = result.scalar()
            if count > 0:
                logger.info(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
                return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
        coordinates_dict = load_coordinates()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coordinates_dict)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
        
        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
        excel_path = '/app/data/raw/data_114_pres_grants_v20250313.xlsx'
        csv_path = '/tmp/data_converted.csv'
        
        if not os.path.exists(excel_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
            return
        
        # –≠–¢–ê–ü 1: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è Excel –≤ CSV
        if not convert_excel_to_csv(excel_path, csv_path):
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Excel –≤ CSV")
            return
        
        # –≠–¢–ê–ü 2: –ß–∏—Ç–∞–µ–º CSV –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
        logger.info("üìñ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —á—Ç–µ–Ω–∏–µ CSV...")
        
        session = SessionLocal()
        
        try:
            projects_added = 0
            batch_size = 200  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –±–∞—Ç—á–∏
            batch = []
            row_count = 0
            
            with open(csv_path, 'r', encoding='utf-8') as csvfile:
                reader = csv.reader(csvfile)
                headers = next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                logger.info(f"CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:5]}...")
                
                for row in reader:
                    row_count += 1
                    
                    try:
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
                        name = row[0] if len(row) > 0 else ""
                        contest = row[1] if len(row) > 1 else ""
                        year = int(row[2]) if len(row) > 2 and row[2] and row[2].isdigit() else None
                        direction = row[3] if len(row) > 3 else ""
                        region = row[5] if len(row) > 5 else ""
                        org = row[6] if len(row) > 6 else ""
                        
                        # Winner (–∫–æ–ª–æ–Ω–∫–∞ 11)
                        winner = False
                        if len(row) > 11 and row[11]:
                            winner_val = str(row[11]).lower().strip()
                            winner = winner_val in ['true', '1', '–¥–∞', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', 'winner', '+']
                        
                        # Money (–∫–æ–ª–æ–Ω–∫–∞ 13)
                        money_req_grant = 0
                        if len(row) > 13 and row[13]:
                            try:
                                money_str = str(row[13]).replace(' ', '').replace(',', '')
                                if money_str.replace('.', '').isdigit():
                                    money_req_grant = int(float(money_str))
                            except:
                                money_req_grant = 0
                        
                        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                        project = Project(
                            name=name,
                            contest=contest,
                            year=year,
                            direction=direction,
                            region=region,
                            org=org,
                            winner=winner,
                            money_req_grant=money_req_grant,
                            coordinates=get_coordinates(region, coordinates_dict)
                        )
                        
                        batch.append(project)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –±–∞—Ç—á–∞–º–∏
                        if len(batch) >= batch_size:
                            session.add_all(batch)
                            session.commit()
                            projects_added += len(batch)
                            
                            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                            batch = []
                            gc.collect()
                            
                            if projects_added % 1000 == 0:
                                logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {projects_added} –ø—Ä–æ–µ–∫—Ç–æ–≤ (—Å—Ç—Ä–æ–∫: {row_count})")
                    
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_count}: {e}")
                        continue
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
                if batch:
                    session.add_all(batch)
                    session.commit()
                    projects_added += len(batch)
            
            logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_count}")
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            session.rollback()
            raise
        finally:
            session.close()
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV
            try:
                os.remove(csv_path)
                logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π CSV —É–¥–∞–ª–µ–Ω")
            except:
                pass
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
