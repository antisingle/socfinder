#!/usr/bin/env python3
"""
–ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ PostgreSQL
–û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–∞–º—è—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ Excel
"""
import os
import sys
import json
import gc
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append('/app')
from app.models.project import Project, Base

def load_coordinates():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        with open('/app/data/regions_coordinates.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

def get_coordinates(region_name, coordinates_dict):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not region_name:
        return None
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if region_name in coordinates_dict:
        coords = coordinates_dict[region_name]
        return {"lat": coords["lat"], "lng": coords["lng"]}
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in coordinates_dict.items():
        if region_name.lower() in region.lower() or region.lower() in region_name.lower():
            return {"lat": coords["lat"], "lng": coords["lng"]}
    
    return None

def create_test_data(session, coordinates_dict):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (Excel —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è 1GB RAM)")
    
    test_projects = [
        {
            "name": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç '–ü–æ–º–æ—â—å –ø–æ–∂–∏–ª—ã–º'",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π",
            "region": "–ú–æ—Å–∫–≤–∞",
            "org": "–ù–ö–û '–ó–∞–±–æ—Ç–∞ –æ —Å—Ç–∞—Ä—à–∏—Ö'",
            "winner": True,
            "money_req_grant": 500000
        },
        {
            "name": "–î–µ—Ç—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤",
            "region": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "org": "–§–æ–Ω–¥ '–î–µ—Ç—Å–∫–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'",
            "winner": True,
            "money_req_grant": 750000
        },
        {
            "name": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç '–ß–∏—Å—Ç—ã–π –≥–æ—Ä–æ–¥'",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–û—Ö—Ä–∞–Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã",
            "region": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π",
            "org": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä '–ó–µ–ª–µ–Ω—ã–π –º–∏—Ä'",
            "winner": False,
            "money_req_grant": 300000
        },
        {
            "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é",
            "region": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
            "org": "–¶–µ–Ω—Ç—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞",
            "winner": True,
            "money_req_grant": 1200000
        },
        {
            "name": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –Ω–∞—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞",
            "region": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "org": "–î–æ–º –¥—Ä—É–∂–±—ã –Ω–∞—Ä–æ–¥–æ–≤",
            "winner": False,
            "money_req_grant": 800000
        }
    ]
    
    projects = []
    for data in test_projects:
        project = Project(
            name=data["name"],
            contest=data["contest"],
            year=data["year"],
            direction=data["direction"],
            region=data["region"],
            org=data["org"],
            winner=data["winner"],
            money_req_grant=data["money_req_grant"],
            coordinates=get_coordinates(data["region"], coordinates_dict)
        )
        projects.append(project)
    
    session.add_all(projects)
    session.commit()
    
    return len(projects)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ú–ò–ù–ò–ú–ê–õ–¨–ù–£–Æ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...")
    logger.info("‚ö†Ô∏è Excel —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ —Å 1GB RAM")
    logger.info("üìä –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL", "postgresql://socfinder:socfinder123@postgres:5432/socfinder")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    engine = create_engine(database_url, pool_size=1, max_overflow=0)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM projects"))
            count = result.scalar()
            if count > 0:
                logger.info(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
                return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
        coordinates_dict = load_coordinates()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coordinates_dict)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = SessionLocal()
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            projects_added = create_test_data(session, coordinates_dict)
            
            logger.info(f"üéâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added}")
            logger.info("üìã –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω—É–∂–µ–Ω —Å–µ—Ä–≤–µ—Ä —Å 2GB+ RAM")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            session.rollback()
            raise
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
