#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
"""
import os
import sys
import csv
import json
import logging
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append('/app')
from app.models.project import Project, Base

def parse_date(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not date_str or date_str.strip() == '':
        return None
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        for fmt in ['%Y.%m.%d', '%Y-%m-%d', '%d.%m.%Y', '%d/%m/%Y']:
            try:
                return datetime.strptime(date_str.strip(), fmt).date()
            except ValueError:
                continue
        return None
    except:
        return None

def parse_number(num_str):
    """–ü–∞—Ä—Å–∏—Ç —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏"""
    if not num_str or str(num_str).strip() == '':
        return None
    
    try:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        clean_str = str(num_str).replace(' ', '').replace(',', '.')
        if clean_str.replace('.', '').replace('-', '').isdigit():
            return float(clean_str)
        return None
    except:
        return None

def parse_boolean(bool_str):
    """–ü–∞—Ä—Å–∏—Ç –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if not bool_str or str(bool_str).strip() == '':
        return False
    
    bool_val = str(bool_str).lower().strip()
    return bool_val in ['true', '1', '–¥–∞', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', 'winner', '+', 'true']

def clean_text(text):
    """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
    if not text:
        return None
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = str(text).strip()
    if cleaned == '':
        return None
    return cleaned

def get_coordinates(region_name):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
    region_coords = {
        '–ú–æ—Å–∫–≤–∞': {'lat': 55.7558, 'lng': 37.6173},
        '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥': {'lat': 59.9311, 'lng': 30.3609},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª': {'lat': 56.4307, 'lng': 48.9964},
        '–£–ª—å—è–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat': 54.3176, 'lng': 48.3706},
        '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–∏–π –∫—Ä–∞–π': {'lat': 56.0184, 'lng': 92.8672},
        '–û–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat': 54.9914, 'lng': 73.3645},
        '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω': {'lat': 55.7887, 'lng': 49.1221},
        '–ù–∏–∂–µ–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat': 56.2965, 'lng': 43.9361},
        '–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat': 56.8519, 'lng': 60.6122},
        '–ß–µ–ª—è–±–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å': {'lat': 55.1644, 'lng': 61.4368}
    }
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in region_coords.items():
        if region_name and region in region_name:
            return coords
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ú–æ—Å–∫–≤—ã –∫–∞–∫ fallback
    return {'lat': 55.7558, 'lng': 37.6173}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ CSV...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL", "postgresql://socfinder_user:Ant1$1ngleoe@postgres:5432/socfinder")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    engine = create_engine(database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
    csv_path = '/app/data/raw/data_114_pres_grants_v20250313.csv'
    
    if not os.path.exists(csv_path):
        logger.error(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
        return
    
    session = SessionLocal()
    
    try:
        # –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
        logger.info("üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã...")
        session.query(Project).delete()
        session.commit()
        logger.info("‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
        
        # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª
        logger.info("üìñ –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª...")
        projects_added = 0
        batch_size = 1000
        batch = []
        
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º csv.reader —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
            reader = csv.reader(csvfile, delimiter=';', quotechar='"')
            headers = next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            logger.info(f"CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:5]}...")
            
            for row_num, row in enumerate(reader, 2):
                if row_num % 10000 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_num}")
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    if not row or len(row) < 15:
                        continue
                    
                    # –ú–∞–ø–ø–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º
                    name = clean_text(row[0]) if len(row) > 0 else None
                    contest = clean_text(row[1]) if len(row) > 1 else None
                    year = int(row[2]) if len(row) > 2 and row[2] and str(row[2]).isdigit() else None
                    direction = clean_text(row[3]) if len(row) > 3 else None
                    date_req = parse_date(row[4]) if len(row) > 4 else None
                    region = clean_text(row[5]) if len(row) > 5 else None
                    org = clean_text(row[6]) if len(row) > 6 else None
                    inn = clean_text(row[7]) if len(row) > 7 else None
                    ogrn = clean_text(row[8]) if len(row) > 8 else None
                    implem_start = parse_date(row[9]) if len(row) > 9 else None
                    implem_end = parse_date(row[10]) if len(row) > 10 else None
                    winner = parse_boolean(row[11]) if len(row) > 11 else False
                    rate = parse_number(row[12]) if len(row) > 12 else None
                    money_req_grant = parse_number(row[13]) if len(row) > 13 else None
                    cofunding = parse_number(row[14]) if len(row) > 14 else None
                    total_money = parse_number(row[15]) if len(row) > 15 else None
                    description = clean_text(row[16]) if len(row) > 16 else None
                    goal = clean_text(row[17]) if len(row) > 17 else None
                    tasks = clean_text(row[18]) if len(row) > 18 else None
                    soc_signif = clean_text(row[19]) if len(row) > 19 else None
                    pj_geo = clean_text(row[20]) if len(row) > 20 else None
                    target_groups = clean_text(row[21]) if len(row) > 21 else None
                    address = clean_text(row[22]) if len(row) > 22 else None
                    web_site = clean_text(row[23]) if len(row) > 23 else None
                    req_num = clean_text(row[24]) if len(row) > 24 else None
                    link = clean_text(row[25]) if len(row) > 25 else None
                    okato = clean_text(row[26]) if len(row) > 26 else None
                    oktmo = clean_text(row[27]) if len(row) > 27 else None
                    level = clean_text(row[28]) if len(row) > 28 else None
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
                    coordinates = get_coordinates(region)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    project = Project(
                        name=name,
                        contest=contest,
                        year=year,
                        direction=direction,
                        date_req=date_req,
                        region=region,
                        org=org,
                        inn=inn,
                        ogrn=ogrn,
                        implem_start=implem_start,
                        implem_end=implem_end,
                        winner=winner,
                        rate=rate,
                        money_req_grant=money_req_grant,
                        cofunding=cofunding,
                        total_money=total_money,
                        description=description,
                        goal=goal,
                        tasks=tasks,
                        soc_signif=soc_signif,
                        pj_geo=pj_geo,
                        target_groups=target_groups,
                        address=address,
                        web_site=web_site,
                        req_num=req_num,
                        link=link,
                        okato=okato,
                        oktmo=oktmo,
                        level=level,
                        coordinates=coordinates
                    )
                    
                    batch.append(project)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏
                    if len(batch) >= batch_size:
                        session.add_all(batch)
                        session.commit()
                        projects_added += len(batch)
                        
                        # –û—á–∏—â–∞–µ–º –±–∞—Ç—á
                        batch = []
                        
                        if projects_added % 1000 == 0:
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {projects_added} –ø—Ä–æ–µ–∫—Ç–æ–≤")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            if batch:
                session.add_all(batch)
                session.commit()
                projects_added += len(batch)
        
        logger.info(f"üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        total_projects = session.query(Project).count()
        logger.info(f"üìä –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {total_projects}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–µ–∫—Ç 289110
        project_289110 = session.query(Project).filter(Project.id == 289110).first()
        if project_289110:
            logger.info(f"‚úÖ –ü—Ä–æ–µ–∫—Ç 289110: {project_289110.name}")
            logger.info(f"   –†–µ–≥–∏–æ–Ω: {project_289110.region}")
            logger.info(f"   –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {project_289110.org}")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç 289110 –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if 'session' in locals():
            session.rollback()
        raise
    finally:
        if 'session' in locals():
            session.close()

if __name__ == "__main__":
    main()
