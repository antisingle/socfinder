#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV –≤ PostgreSQL
"""
import os
import sys
import csv
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append('/app')
from app.models.project import Project, Base

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL", "postgresql://socfinder_user:Ant1$1ngleoe@postgres:5432/socfinder")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    engine = create_engine(database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        session = SessionLocal()
        
        # –ü—É—Ç—å –∫ CSV —Ñ–∞–π–ª—É
        csv_path = '/app/data/raw/data_114_pres_grants_v20250313.csv'
        
        if not os.path.exists(csv_path):
            logger.error(f"‚ùå CSV —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {csv_path}")
            return
        
        logger.info(f"üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑: {csv_path}")
        
        projects_added = 0
        batch_size = 100  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        
        with open(csv_path, 'r', encoding='utf-8') as csvfile:
            reader = csv.reader(csvfile, delimiter=';')
            headers = next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            logger.info(f"CSV –∑–∞–≥–æ–ª–æ–≤–∫–∏: {headers}")
            
            batch = []
            
            for row_num, row in enumerate(reader, 1):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
                    if not row or len(row) < 15:
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    name = row[0].strip() if len(row) > 0 and row[0] else ""
                    contest = row[1].strip() if len(row) > 1 and row[1] else ""
                    year = int(row[2]) if len(row) > 2 and row[2] and row[2].isdigit() else None
                    direction = row[3].strip() if len(row) > 3 and row[3] else ""
                    region = row[5].strip() if len(row) > 5 and row[5] else ""
                    org = row[6].strip() if len(row) > 6 and row[6] else ""
                    
                    # Winner (–∫–æ–ª–æ–Ω–∫–∞ 11)
                    winner = False
                    if len(row) > 11 and row[11]:
                        winner_val = str(row[11]).lower().strip()
                        winner = winner_val in ['true', '1', '–¥–∞', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', 'winner', '+']
                    
                    # Money (–∫–æ–ª–æ–Ω–∫–∞ 13)
                    money_req_grant = 0
                    if len(row) > 13 and row[13]:
                        try:
                            money_str = str(row[13]).replace(' ', '').replace(',', '')
                            if money_str.replace('.', '').isdigit():
                                money_req_grant = int(float(money_str))
                        except:
                            money_req_grant = 0
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    project = Project(
                        name=name,
                        contest=contest,
                        year=year,
                        direction=direction,
                        region=region,
                        org=org,
                        winner=winner,
                        money_req_grant=money_req_grant
                    )
                    
                    batch.append(project)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏
                    if len(batch) >= batch_size:
                        session.add_all(batch)
                        session.commit()
                        projects_added += len(batch)
                        
                        # –û—á–∏—â–∞–µ–º –±–∞—Ç—á
                        batch = []
                        
                        if projects_added % 1000 == 0:
                            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {projects_added} –ø—Ä–æ–µ–∫—Ç–æ–≤")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row_num}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–∫–∏
            if batch:
                session.add_all(batch)
                session.commit()
                projects_added += len(batch)
        
        logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added}")
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if 'session' in locals():
            session.rollback()
        raise
    finally:
        if 'session' in locals():
            session.close()

if __name__ == "__main__":
    main()
