#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –ø–æ—Ä—Ü–∏—è–º–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
"""
import os
import sys
import json
import gc
import time
import pandas as pd
import numpy as np
from sqlalchemy import create_engine, text
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'backend')))

def load_coordinates():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        coords_path = os.path.join(os.path.dirname(__file__), '..', 'regions_coordinates.json')
        with open(coords_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

def get_coordinates(region_name, coordinates_dict):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not region_name or pd.isna(region_name):
        return None
    
    region_name = str(region_name)
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if region_name in coordinates_dict:
        coords = coordinates_dict[region_name]
        return {"lat": coords["lat"], "lng": coords["lng"]}
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in coordinates_dict.items():
        if region_name.lower() in region.lower() or region.lower() in region_name.lower():
            return {"lat": coords["lat"], "lng": coords["lng"]}
    
    return None

def clean_value(value):
    """–û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç NaN –∏ —Ç.–ø."""
    if pd.isna(value):
        return None
    return value

def parse_money(value):
    """–ü–∞—Ä—Å–∏–º –¥–µ–Ω–µ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if pd.isna(value):
        return 0
    
    try:
        if isinstance(value, (int, float)):
            return int(value)
        else:
            money_str = str(value).replace(' ', '').replace(',', '')
            if money_str.replace('.', '').isdigit():
                return int(float(money_str))
    except:
        pass
    
    return 0

def parse_boolean(value):
    """–ü–∞—Ä—Å–∏–º –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ"""
    if pd.isna(value):
        return False
    
    if isinstance(value, bool):
        return value
    
    value_str = str(value).lower().strip()
    return value_str in ['true', '1', '–¥–∞', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', 'winner', '+']

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    start_time = time.time()
    
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –ø–æ—Ä—Ü–∏—è–º–∏...")
    
    # –ü—É—Ç—å –∫ Excel —Ñ–∞–π–ª—É
    excel_path = os.path.join(os.path.dirname(__file__), '..', 'raw', 'data_114_pres_grants_v20250313.xlsx')
    logger.info(f"Excel —Ñ–∞–π–ª: {excel_path}")
    
    if not os.path.exists(excel_path):
        logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
        return 1
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = "postgresql://socfinder:test_password_123@localhost:5432/socfinder"
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    engine = create_engine(database_url)
    
    with engine.connect() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        result = conn.execute(text("SELECT to_regclass('public.projects')"))
        table_exists = result.scalar() is not None
        
        if not table_exists:
            logger.info("–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É projects...")
            conn.execute(text("""
            CREATE TABLE projects (
                id SERIAL PRIMARY KEY,
                name TEXT,
                contest TEXT,
                year INTEGER,
                direction TEXT,
                region TEXT,
                org TEXT,
                winner BOOLEAN DEFAULT FALSE,
                money_req_grant BIGINT DEFAULT 0,
                cofunding BIGINT DEFAULT 0,
                total_money BIGINT DEFAULT 0,
                coordinates JSONB
            )
            """))
            conn.execute(text("CREATE INDEX idx_projects_region ON projects (region)"))
            conn.execute(text("CREATE INDEX idx_projects_winner ON projects (winner)"))
            conn.commit()
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
            result = conn.execute(text("SELECT COUNT(*) FROM projects"))
            count = result.scalar()
            if count > 0:
                logger.info(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
                return 0
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
    coordinates_dict = load_coordinates()
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coordinates_dict)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ Excel
    logger.info("–û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ Excel...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º openpyxl –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç—Ä–æ–∫
    import openpyxl
    wb = openpyxl.load_workbook(excel_path, read_only=True)
    sheet = wb.active
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ (–∑–∞ –≤—ã—á–µ—Ç–æ–º –∑–∞–≥–æ–ª–æ–≤–∫–∞)
    nrows = sheet.max_row - 1
    logger.info(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ Excel: {nrows}")
    wb.close()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ü–∏—è–º–∏
    chunk_size = 1000
    total_chunks = (nrows // chunk_size) + 1
    total_rows_processed = 0
    
    for chunk_idx in range(total_chunks):
        skip_rows = 1 + chunk_idx * chunk_size  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —á–∞–Ω–∫–∏
        
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–∞ {chunk_idx+1}/{total_chunks} (—Å—Ç—Ä–æ–∫–∏ {skip_rows}-{skip_rows+chunk_size-1})...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞–Ω–∫ –¥–∞–Ω–Ω—ã—Ö
            df_chunk = pd.read_excel(
                excel_path, 
                skiprows=skip_rows,
                nrows=chunk_size,
                dtype=str  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            )
            
            if df_chunk.empty:
                logger.info("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞.")
                break
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
            rows = []
            for _, row in df_chunk.iterrows():
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                    name = clean_value(row.get(0))
                    contest = clean_value(row.get(1))
                    year = int(row.get(2)) if row.get(2) and str(row.get(2)).isdigit() else None
                    direction = clean_value(row.get(3))
                    region = clean_value(row.get(5))  # –ö–æ–ª–æ–Ω–∫–∞ 5
                    org = clean_value(row.get(6))     # –ö–æ–ª–æ–Ω–∫–∞ 6
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º winner (–∫–æ–ª–æ–Ω–∫–∞ 11)
                    winner = parse_boolean(row.get(11) if len(row) > 11 else None)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º money_req_grant (–∫–æ–ª–æ–Ω–∫–∞ 13)
                    money_req_grant = parse_money(row.get(13) if len(row) > 13 else None)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                    coords = get_coordinates(region, coordinates_dict)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É
                    rows.append({
                        'name': name,
                        'contest': contest,
                        'year': year,
                        'direction': direction,
                        'region': region,
                        'org': org,
                        'winner': winner,
                        'money_req_grant': money_req_grant,
                        'coordinates': json.dumps(coords) if coords else None
                    })
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏: {e}")
                    continue
            
            # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É
            if rows:
                with engine.begin() as conn:
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
                    for row in rows:
                        insert_query = text("""
                        INSERT INTO projects (name, contest, year, direction, region, org, winner, money_req_grant, coordinates)
                        VALUES (:name, :contest, :year, :direction, :region, :org, :winner, :money_req_grant, :coordinates)
                        """)
                        
                        conn.execute(insert_query, row)
                
                total_rows_processed += len(rows)
                logger.info(f"–í—Å—Ç–∞–≤–ª–µ–Ω–æ {len(rows)} —Å—Ç—Ä–æ–∫. –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {total_rows_processed}")
            
            # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
            del df_chunk
            del rows
            gc.collect()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —á–∞–Ω–∫–∞ {chunk_idx+1}: {e}")
            continue
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.info("–°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã...")
    with engine.begin() as conn:
        conn.execute(text("CREATE INDEX IF NOT EXISTS idx_projects_name ON projects (name)"))
        conn.execute(text("CREATE INDEX IF NOT EXISTS idx_projects_org ON projects (org)"))
        conn.execute(text("ANALYZE projects"))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    with engine.connect() as conn:
        result = conn.execute(text("SELECT COUNT(*) FROM projects"))
        count = result.scalar()
        logger.info(f"–í—Å–µ–≥–æ –≤ –±–∞–∑–µ {count} –ø—Ä–æ–µ–∫—Ç–æ–≤")
    
    end_time = time.time()
    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    logger.info("üì¶ –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    dump_dir = os.path.join(os.path.dirname(__file__), '..', 'dumps')
    os.makedirs(dump_dir, exist_ok=True)
    
    dump_path = os.path.join(dump_dir, 'socfinder_full_dump.sql')
    
    try:
        import subprocess
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º docker-compose exec –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pg_dump –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        cmd = [
            'docker-compose',
            '-f', 'docker-compose.minimal.yml',
            'exec',
            '-T',
            'postgres',
            'pg_dump',
            '-U', 'socfinder',
            '--clean',
            '--if-exists',
            '--no-comments',
            '--no-security-labels',
            '--no-tablespaces',
            '--no-unlogged-table-data',
            '-Fc',  # Custom format
            'socfinder'
        ]
        
        with open(dump_path, 'wb') as f:
            subprocess.run(cmd, stdout=f, check=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–º–ø–∞
        dump_size = os.path.getsize(dump_path) / (1024 * 1024)  # –≤ –ú–ë
        logger.info(f"‚úÖ –î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {dump_path}")
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–º–ø–∞: {dump_size:.2f} –ú–ë")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥–∞–º–ø–∞
        restore_script_path = os.path.join(os.path.dirname(__file__), 'restore_from_full_dump.py')
        with open(restore_script_path, 'w') as f:
            f.write('''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞
"""
import os
import sys
import subprocess
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def restore_from_dump():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞"""
    logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞...")
    
    # –ü—É—Ç—å –∫ –¥–∞–º–ø—É
    dump_path = '/app/data/dumps/socfinder_full_dump.sql'
    
    if not os.path.exists(dump_path):
        logger.error(f"‚ùå –î–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {dump_path}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–º–ø–∞
        dump_size = os.path.getsize(dump_path) / (1024 * 1024)  # –≤ –ú–ë
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–º–ø–∞: {dump_size:.2f} –ú–ë")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –¥–∞–º–ø–∞
        cmd = [
            'pg_restore',
            '--host=postgres',
            '--port=5432',
            '--username=socfinder',
            '--dbname=socfinder',
            '--clean',
            '--if-exists',
            '--no-owner',
            '--no-privileges',
            '--verbose',
            dump_path
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        env = os.environ.copy()
        env['PGPASSWORD'] = os.getenv('POSTGRES_PASSWORD', 'test_password_123')
        
        result = subprocess.run(cmd, env=env, capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {result.stderr}")
            return False
        
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    start_time = time.time()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –¥–∞–º–ø–∞
    success = restore_from_dump()
    
    end_time = time.time()
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
''')
        
        # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(restore_script_path, 0o755)
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {restore_script_path}")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Dockerfile
        dockerfile_path = os.path.join(os.path.dirname(__file__), '..', '..', 'backend', 'Dockerfile.full')
        with open(dockerfile_path, 'w') as f:
            f.write('''FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    gcc \\
    postgresql-client \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä—É–µ–º requirements.txt
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–∞–º–ø–∞ –∏ FastAPI
CMD ["sh", "-c", "python data/scripts/restore_from_full_dump.py && uvicorn app.main:app --host 0.0.0.0 --port 8000"]
''')
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Dockerfile: {dockerfile_path}")
        
        logger.info('''
üöÄ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–∞–º–ø–∞:
1. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ backend/Dockerfile.full –≤ backend/Dockerfile
2. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑: docker-compose -f docker-compose.minimal.yml build backend
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose -f docker-compose.minimal.yml up -d
''')
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
