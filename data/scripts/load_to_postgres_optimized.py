#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ PostgreSQL
–ß–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –ø–æ —á–∞—Å—Ç—è–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ (–¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å 1GB RAM)
"""
import os
import sys
import json
import gc
from openpyxl import load_workbook
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.append('/app')
from app.models.project import Project, Base

def load_coordinates():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        with open('/app/data/regions_coordinates.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

def get_coordinates(region_name, coordinates_dict):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not region_name:
        return None
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if region_name in coordinates_dict:
        coords = coordinates_dict[region_name]
        return {"lat": coords["lat"], "lng": coords["lng"]}
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in coordinates_dict.items():
        if region_name.lower() in region.lower() or region.lower() in region_name.lower():
            return {"lat": coords["lat"], "lng": coords["lng"]}
    
    return None

def process_batch(batch_data, session, coordinates_dict, start_row):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –¥–∞–Ω–Ω—ã—Ö"""
    projects = []
    
    for i, row in enumerate(batch_data):
        row_num = start_row + i
        
        try:
            # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–∞–ø–ø–∏–Ω–≥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Excel
            name = str(row[0]) if row[0] else ""
            contest = str(row[1]) if row[1] else ""
            year = int(row[2]) if row[2] and str(row[2]).isdigit() else None
            direction = str(row[3]) if row[3] else ""
            region = str(row[5]) if row[5] else ""  # –ö–æ–ª–æ–Ω–∫–∞ 5
            org = str(row[6]) if row[6] else ""     # –ö–æ–ª–æ–Ω–∫–∞ 6
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º winner (–∫–æ–ª–æ–Ω–∫–∞ 11)
            winner = False
            if len(row) > 11 and row[11] is not None:
                winner_val = str(row[11]).lower().strip()
                winner = winner_val in ['true', '1', '–¥–∞', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', 'winner', '+']
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º money_req_grant (–∫–æ–ª–æ–Ω–∫–∞ 13)
            money_req_grant = 0
            if len(row) > 13 and row[13] is not None:
                try:
                    money_val = row[13]
                    if isinstance(money_val, (int, float)):
                        money_req_grant = int(money_val)
                    else:
                        money_str = str(money_val).replace(' ', '').replace(',', '')
                        if money_str.replace('.', '').isdigit():
                            money_req_grant = int(float(money_str))
                except:
                    money_req_grant = 0
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
            project = Project(
                name=name,
                contest=contest,
                year=year,
                direction=direction,
                region=region,
                org=org,
                winner=winner,
                money_req_grant=money_req_grant,
                coordinates=get_coordinates(region, coordinates_dict)
            )
            
            projects.append(project)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")
            continue
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á
    if projects:
        session.add_all(projects)
        session.commit()
        
    return len(projects)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–∞–º—è—Ç–∏"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–£–Æ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...")
    logger.info("üíæ –†–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å 1GB RAM")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL", "postgresql://socfinder:socfinder123@postgres:5432/socfinder")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    engine = create_engine(database_url, pool_size=1, max_overflow=0)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM projects"))
            count = result.scalar()
            if count > 0:
                logger.info(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
                return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
        coordinates_dict = load_coordinates()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coordinates_dict)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª
        excel_path = '/app/data/raw/data_114_pres_grants_v20250313.xlsx'
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞: {excel_path}")
        
        if not os.path.exists(excel_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
            return
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–∞–º—è—Ç–∏
        logger.info("üìñ –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel —Ñ–∞–π–ª –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏—è...")
        workbook = load_workbook(excel_path, read_only=True, data_only=True)
        sheet = workbook.active
        logger.info(f"–û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {sheet.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞)
        headers = []
        for cell in sheet[1]:
            headers.append(cell.value)
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:5]}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = SessionLocal()
        
        try:
            projects_added = 0
            batch_size = 500  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏
            batch_data = []
            row_count = 0
            
            logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –ø–æ —á–∞—Å—Ç—è–º...")
            
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ —á–∞—Å—Ç—è–º
            for row in sheet.iter_rows(min_row=2, values_only=True):
                row_count += 1
                batch_data.append(row)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–ø–æ–ª–Ω–µ–Ω
                if len(batch_data) >= batch_size:
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á
                    added = process_batch(batch_data, session, coordinates_dict, row_count - len(batch_data) + 1)
                    projects_added += added
                    
                    # –ö–†–ò–¢–ò–ß–ù–û: –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
                    batch_data = []
                    gc.collect()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞
                    
                    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added} (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_count})")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
                    import time
                    time.sleep(0.1)
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 —Å—Ç—Ä–æ–∫
                if row_count % 5000 == 0:
                    logger.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_count}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–∞–Ω–Ω—ã–µ
            if batch_data:
                added = process_batch(batch_data, session, coordinates_dict, row_count - len(batch_data) + 1)
                projects_added += added
                batch_data = []
                gc.collect()
            
            logger.info(f"üéâ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {row_count}")
            logger.info(f"‚úÖ –í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {projects_added}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            session.rollback()
            raise
        finally:
            session.close()
            workbook.close()  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å
            gc.collect()
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
