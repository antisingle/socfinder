#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ LLM
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ –º–∏–Ω—É—Ç–∞—Ö –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python time_batch_processing.py <minutes>
    
–ü—Ä–∏–º–µ—Ä—ã:
    python time_batch_processing.py 60      # 1 —á–∞—Å
    python time_batch_processing.py 360     # 6 —á–∞—Å–æ–≤
    python time_batch_processing.py 1440    # 24 —á–∞—Å–∞
"""

import time
import logging
import sys
from datetime import datetime, timedelta
from postgres_manager import PostgresManager
from ollama_analyzer import OllamaAnalyzer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('time_batch_processing.log'),
        logging.StreamHandler()
    ]
)

class TimeBatchProcessor:
    def __init__(self, minutes: int):
        self.pg_manager = PostgresManager()
        self.ollama_analyzer = OllamaAnalyzer()
        self.start_time = None
        self.max_duration = timedelta(minutes=minutes)
        
    def run_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        self.start_time = datetime.now()
        end_time = self.start_time + self.max_duration
        
        logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞ {self.max_duration.total_seconds()/60:.0f} –º–∏–Ω—É—Ç")
        logging.info(f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self.start_time.strftime('%H:%M:%S')}")
        logging.info(f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_time.strftime('%H:%M:%S')}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
        winners = self.get_winners_priority_list()
        
        if not winners:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π")
            return
            
        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(winners)} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        processed_count = 0
        total_problems = 0
        total_solutions = 0
        
        for i, winner in enumerate(winners):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            if datetime.now() >= end_time:
                logging.info(f"‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –≥—Ä–∞–Ω—Ç–æ–≤ –∑–∞ {self.max_duration.total_seconds()/60:.0f} –º–∏–Ω—É—Ç")
                break
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –≥—Ä–∞–Ω—Ç
            if self.is_already_analyzed(winner['req_num']):
                logging.info(f"‚è≠Ô∏è –ì—Ä–∞–Ω—Ç {winner['req_num']} —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é")
                continue
                
            try:
                logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä–∞–Ω—Ç {i+1}/{len(winners)}: {winner['req_num']}")
                logging.info(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {winner['name']}")
                logging.info(f"üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: {winner['date_req']}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≥—Ä–∞–Ω—Ç
                start_analysis = time.time()
                analysis_result = self.analyze_grant(winner)
                analysis_time = time.time() - start_analysis
                
                if analysis_result and isinstance(analysis_result, dict):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    analysis_data = [{
                        'grant_id': winner['req_num'],
                        'problems': analysis_result.get('problems', []),
                        'solutions': analysis_result.get('solutions', [])
                    }]
                    
                    success = self.pg_manager.save_analysis_results(analysis_data)
                    if success:
                        logging.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                        
                        problems_count = len(analysis_result.get('problems', []))
                        solutions_count = len(analysis_result.get('solutions', []))
                        
                        total_problems += problems_count
                        total_solutions += solutions_count
                        processed_count += 1
                        
                        logging.info(f"‚úÖ –ì—Ä–∞–Ω—Ç {winner['req_num']} –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {analysis_time:.1f}—Å")
                        logging.info(f"üìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {problems_count}, —Ä–µ—à–µ–Ω–∏–π: {solutions_count}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                        elapsed = datetime.now() - self.start_time
                        remaining = self.max_duration - elapsed
                        logging.info(f"‚è±Ô∏è –ü—Ä–æ—à–ª–æ: {elapsed.total_seconds()/60:.1f} –º–∏–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: {remaining.total_seconds()/60:.1f} –º–∏–Ω")
                        
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
                        
                else:
                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞–Ω—Ç {winner['req_num']}")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥—Ä–∞–Ω—Ç–∞ {winner['req_num']}: {e}")
                continue
                
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        elapsed_total = datetime.now() - self.start_time
        logging.info(f"\nüéØ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        logging.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {elapsed_total.total_seconds()/60:.1f} –º–∏–Ω—É—Ç")
        logging.info(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥—Ä–∞–Ω—Ç–æ–≤: {processed_count}")
        logging.info(f"üìù –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {total_problems}")
        logging.info(f"üí° –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {total_solutions}")
        if processed_count > 0:
            logging.info(f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {processed_count/(elapsed_total.total_seconds()/60):.1f} –≥—Ä–∞–Ω—Ç–æ–≤/–º–∏–Ω")
        
    def get_winners_priority_list(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        try:
            conn = self.pg_manager.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
            cursor.execute('''
                SELECT id, req_num, name, date_req, direction, description, goal, tasks, soc_signif, pj_geo, target_groups
                FROM projects 
                WHERE winner = true 
                ORDER BY date_req DESC, id DESC
            ''')
            
            winners = []
            for row in cursor.fetchall():
                winner = {
                    'id': row[0],
                    'req_num': row[1],
                    'name': row[2],
                    'date_req': row[3],
                    'direction': row[4],
                    'description': row[5],
                    'goal': row[6],
                    'tasks': row[7],
                    'soc_signif': row[8],
                    'pj_geo': row[9],
                    'target_groups': row[10]
                }
                winners.append(winner)
            
            cursor.close()
            conn.close()
            return winners
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {e}")
            return None
    
    def is_already_analyzed(self, grant_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª –ª–∏ –≥—Ä–∞–Ω—Ç —É–∂–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"""
        try:
            conn = self.pg_manager.get_connection()
            if not conn:
                return False
                
            cursor = conn.cursor()
            cursor.execute('''
                SELECT COUNT(*) FROM problems WHERE grant_id = %s
            ''', (grant_id,))
            
            count = cursor.fetchone()[0]
            cursor.close()
            conn.close()
            
            return count > 0
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            return False
    
    def analyze_grant(self, grant_data: dict) -> dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥—Ä–∞–Ω—Ç —á–µ—Ä–µ–∑ LLM"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            analysis_text = f"""
–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {grant_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {grant_data.get('direction', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–û–ø–∏—Å–∞–Ω–∏–µ: {grant_data.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¶–µ–ª—å: {grant_data.get('goal', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ó–∞–¥–∞—á–∏: {grant_data.get('tasks', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å: {grant_data.get('soc_signif', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–ì–µ–æ–≥—Ä–∞—Ñ–∏—è: {grant_data.get('pj_geo', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã: {grant_data.get('target_groups', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
"""
            

            result = self.ollama_analyzer.analyze_grant({
                'req_num': grant_data['req_num'],
                'name': grant_data['name'],
                'description': analysis_text
            })
            
            if result:
                logging.info(f"‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω: {len(result.get('problems', []))} –ø—Ä–æ–±–ª–µ–º, {len(result.get('solutions', []))} —Ä–µ—à–µ–Ω–∏–π")
                return result
            else:
                logging.warning("‚ö†Ô∏è LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                return None
                
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≥—Ä–∞–Ω—Ç–∞: {e}")
            return None

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python time_batch_processing.py <minutes>")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python time_batch_processing.py 60      # 1 —á–∞—Å")
        print("  python time_batch_processing.py 360     # 6 —á–∞—Å–æ–≤")
        print("  python time_batch_processing.py 1440    # 24 —á–∞—Å–∞")
        return
    
    try:
        minutes = int(sys.argv[1])
        if minutes <= 0:
            print("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
    except ValueError:
        print("‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Ollama
    analyzer = OllamaAnalyzer()
    if not analyzer.test_connection():
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ollama")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    processor = TimeBatchProcessor(minutes)
    processor.run_processing()

if __name__ == "__main__":
    main()
