#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π
"""

import requests
import json
from typing import Dict, Any

class APIEndpointTester:
    def __init__(self, base_url: str = "http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
    
    def test_endpoint(self, method: str, endpoint: str, data: Dict[str, Any] = None) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint"""
        url = f"{self.base_url}{endpoint}"
        
        try:
            if method.upper() == "GET":
                response = self.session.get(url)
            elif method.upper() == "POST":
                response = self.session.post(url, json=data)
            else:
                return {"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"}
            
            if response.status_code == 200:
                return {
                    "success": True,
                    "status_code": response.status_code,
                    "data": response.json(),
                    "count": len(response.json()) if isinstance(response.json(), list) else None
                }
            else:
                return {
                    "success": False,
                    "status_code": response.status_code,
                    "error": response.text
                }
                
        except requests.exceptions.ConnectionError:
            return {"error": "–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω."}
        except Exception as e:
            return {"error": f"–û—à–∏–±–∫–∞: {str(e)}"}
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã API"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –¥–ª—è –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π")
        print("=" * 60)
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
        print("\nüìã –¢–µ—Å—Ç 1: GET /api/problems")
        result = self.test_endpoint("GET", "/api/problems")
        self.print_result(result)
        
        # –¢–µ—Å—Ç 2: –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–±–ª–µ–º
        print("\nüìä –¢–µ—Å—Ç 2: GET /api/problems/count")
        result = self.test_endpoint("GET", "/api/problems/count")
        self.print_result(result)
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—à–µ–Ω–∏–π
        print("\nüîß –¢–µ—Å—Ç 3: GET /api/solutions")
        result = self.test_endpoint("GET", "/api/solutions")
        self.print_result(result)
        
        # –¢–µ—Å—Ç 4: –ü–æ–¥—Å—á–µ—Ç —Ä–µ—à–µ–Ω–∏–π
        print("\nüìä –¢–µ—Å—Ç 4: GET /api/solutions/count")
        result = self.test_endpoint("GET", "/api/solutions/count")
        self.print_result(result)
        
        # –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –ø–æ grant_id
        print("\nüîó –¢–µ—Å—Ç 5: POST /api/solutions/by-grants")
        test_data = {"grant_ids": ["25-2-002591", "25-1-008623"]}
        result = self.test_endpoint("POST", "/api/solutions/by-grants", test_data)
        self.print_result(result)
        
        # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—à–µ–Ω–∏–π
        print("\nüìà –¢–µ—Å—Ç 6: GET /api/solutions/stats")
        result = self.test_endpoint("GET", "/api/solutions/stats")
        self.print_result(result)
        
        # –¢–µ—Å—Ç 7: –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º
        print("\nüîç –¢–µ—Å—Ç 7: GET /api/problems/search?query=–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã")
        result = self.test_endpoint("GET", "/api/problems/search?query=–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã")
        self.print_result(result)
        
        print("\n" + "=" * 60)
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    def print_result(self, result: Dict[str, Any]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        if "error" in result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        elif result.get("success"):
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ (–∫–æ–¥: {result['status_code']})")
            if result.get("count") is not None:
                print(f"   üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {result['count']}")
            if result.get("data") and isinstance(result["data"], list) and len(result["data"]) > 0:
                print(f"   üìù –ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å: {result['data'][0].get('id', 'N/A')}")
        else:
            print(f"‚ùå –ù–µ—É—Å–ø–µ—à–Ω–æ (–∫–æ–¥: {result['status_code']})")
            if "error" in result:
                print(f"   –û—à–∏–±–∫–∞: {result['error']}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API endpoints")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω: uvicorn app.main:app --reload")
    
    tester = APIEndpointTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
