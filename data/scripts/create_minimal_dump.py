#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""
import os
import sys
import json
import subprocess
import logging
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'backend')))
from app.models.project import Project, Base

def load_coordinates():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        coords_path = os.path.join(os.path.dirname(__file__), '..', 'regions_coordinates.json')
        with open(coords_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

def get_coordinates(region_name, coordinates_dict):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not region_name:
        return None
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if region_name in coordinates_dict:
        coords = coordinates_dict[region_name]
        return {"lat": coords["lat"], "lng": coords["lng"]}
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in coordinates_dict.items():
        if region_name.lower() in region.lower() or region.lower() in region_name.lower():
            return {"lat": coords["lat"], "lng": coords["lng"]}
    
    return None

def create_test_data(session, coordinates_dict):
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logger.info("üß™ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    test_projects = [
        {
            "name": "–°–æ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç '–ü–æ–º–æ—â—å –ø–æ–∂–∏–ª—ã–º'",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–∂–∏–ª—ã—Ö –ª—é–¥–µ–π",
            "region": "–ú–æ—Å–∫–≤–∞",
            "org": "–ù–ö–û '–ó–∞–±–æ—Ç–∞ –æ —Å—Ç–∞—Ä—à–∏—Ö'",
            "winner": True,
            "money_req_grant": 500000
        },
        {
            "name": "–î–µ—Ç—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤",
            "region": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
            "org": "–§–æ–Ω–¥ '–î–µ—Ç—Å–∫–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ'",
            "winner": True,
            "money_req_grant": 750000
        },
        {
            "name": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç '–ß–∏—Å—Ç—ã–π –≥–æ—Ä–æ–¥'",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–û—Ö—Ä–∞–Ω–∞ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã",
            "region": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π",
            "org": "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä '–ó–µ–ª–µ–Ω—ã–π –º–∏—Ä'",
            "winner": False,
            "money_req_grant": 300000
        },
        {
            "name": "–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∏–Ω–≤–∞–ª–∏–¥–æ–≤",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ª—é–¥–µ–π —Å –∏–Ω–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å—é",
            "region": "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω",
            "org": "–¶–µ–Ω—Ç—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞",
            "winner": True,
            "money_req_grant": 1200000
        },
        {
            "name": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–π —Ñ–µ—Å—Ç–∏–≤–∞–ª—å –Ω–∞—Ä–æ–¥–æ–≤ –†–æ—Å—Å–∏–∏",
            "contest": "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç—Å–∫–∏–µ –≥—Ä–∞–Ω—Ç—ã 2023",
            "year": 2023,
            "direction": "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º–µ–∂–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞",
            "region": "–°–≤–µ—Ä–¥–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
            "org": "–î–æ–º –¥—Ä—É–∂–±—ã –Ω–∞—Ä–æ–¥–æ–≤",
            "winner": False,
            "money_req_grant": 800000
        }
    ]
    
    projects = []
    for data in test_projects:
        project = Project(
            name=data["name"],
            contest=data["contest"],
            year=data["year"],
            direction=data["direction"],
            region=data["region"],
            org=data["org"],
            winner=data["winner"],
            money_req_grant=data["money_req_grant"],
            coordinates=get_coordinates(data["region"], coordinates_dict)
        )
        projects.append(project)
    
    session.add_all(projects)
    session.commit()
    
    return len(projects)

def create_database_dump():
    """–°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üì¶ –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    dump_dir = os.path.join(os.path.dirname(__file__), '..', 'dumps')
    os.makedirs(dump_dir, exist_ok=True)
    
    dump_path = os.path.join(dump_dir, 'socfinder_minimal_dump.sql')
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pg_dump –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞
        cmd = [
            'docker-compose',
            '-f', 'docker-compose.minimal.yml',
            'exec',
            '-T',
            'postgres',
            'pg_dump',
            '-U', 'socfinder',
            '--clean',
            '--if-exists',
            '--format=c',
            'socfinder'
        ]
        
        with open(dump_path, 'wb') as f:
            subprocess.run(cmd, stdout=f, check=True)
        
        logger.info(f"‚úÖ –î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {dump_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–º–ø–∞
        dump_size = os.path.getsize(dump_path) / (1024)  # –≤ –ö–ë
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–º–ø–∞: {dump_size:.2f} –ö–ë")
        
        return dump_path
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç PostgreSQL
        result = subprocess.run(
            ["docker-compose", "-f", "docker-compose.minimal.yml", "port", "postgres", "5432"],
            capture_output=True, text=True, check=True
        )
        port = result.stdout.strip().split(":")[-1]
        database_url = f"postgresql://socfinder:test_password_123@localhost:{port}/socfinder"
        logger.info(f"URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {database_url}")
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç PostgreSQL: {e}")
        database_url = "postgresql://socfinder:test_password_123@localhost:5432/socfinder"
    
    try:
        engine = create_engine(database_url)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        session = SessionLocal()
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
            coordinates_dict = load_coordinates()
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coordinates_dict)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            projects_added = create_test_data(session, coordinates_dict)
            logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø
            dump_path = create_database_dump()
            if dump_path:
                logger.info(f"‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {dump_path}")
                
                # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –¥–∞–º–ø–∞
                restore_script_path = os.path.join(os.path.dirname(__file__), 'restore_from_minimal_dump.py')
                with open(restore_script_path, 'w') as f:
                    f.write('''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞
"""
import os
import sys
import subprocess
import logging
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def restore_from_dump():
    """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –¥–∞–º–ø–∞"""
    logger.info("üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞...")
    
    # –ü—É—Ç—å –∫ –¥–∞–º–ø—É
    dump_path = '/app/data/dumps/socfinder_minimal_dump.sql'
    
    if not os.path.exists(dump_path):
        logger.error(f"‚ùå –î–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {dump_path}")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–º–ø–∞
        dump_size = os.path.getsize(dump_path) / (1024)  # –≤ –ö–ë
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–º–ø–∞: {dump_size:.2f} –ö–ë")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –¥–∞–º–ø–∞
        cmd = [
            'pg_restore',
            '--host=postgres',
            '--port=5432',
            '--username=socfinder',
            '--dbname=socfinder',
            '--clean',
            '--if-exists',
            '--no-owner',
            '--no-privileges',
            '--verbose',
            dump_path
        ]
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        env = os.environ.copy()
        env['PGPASSWORD'] = os.getenv('POSTGRES_PASSWORD', 'test_password_123')
        
        result = subprocess.run(cmd, env=env, capture_output=True, text=True)
        
        if result.returncode != 0:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏: {result.stderr}")
            return False
        
        logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    start_time = time.time()
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –¥–∞–º–ø–∞
    success = restore_from_dump()
    
    end_time = time.time()
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main())
''')
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {restore_script_path}")
                os.chmod(restore_script_path, 0o755)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Dockerfile
                dockerfile_path = os.path.join(os.path.dirname(__file__), '..', '..', 'backend', 'Dockerfile.minimal')
                with open(dockerfile_path, 'w') as f:
                    f.write('''FROM python:3.11-slim

WORKDIR /app

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
RUN apt-get update && apt-get install -y \\
    gcc \\
    postgresql-client \\
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä—É–µ–º requirements.txt
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN pip install --no-cache-dir -r requirements.txt

# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
COPY . .

# –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
RUN useradd -m -u 1000 appuser && chown -R appuser:appuser /app
USER appuser

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–∞–º–ø–∞ –∏ FastAPI
CMD ["sh", "-c", "python data/scripts/restore_from_minimal_dump.py && uvicorn app.main:app --host 0.0.0.0 --port 8000"]
''')
                
                logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π Dockerfile: {dockerfile_path}")
                
                logger.info('''
üöÄ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–∞–º–ø–∞:
1. –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ backend/Dockerfile.minimal –≤ backend/Dockerfile
2. –ü–µ—Ä–µ—Å–æ–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞–∑: docker-compose -f docker-compose.minimal.yml build backend
3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: docker-compose -f docker-compose.minimal.yml up -d
''')
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            session.rollback()
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
