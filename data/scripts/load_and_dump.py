#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel –≤ PostgreSQL –∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import json
import time
import subprocess
from openpyxl import load_workbook
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ app –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', 'backend')))
from app.models.project import Project, Base

def load_coordinates():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ä–µ–≥–∏–æ–Ω–æ–≤"""
    try:
        coords_path = os.path.join(os.path.dirname(__file__), '..', 'regions_coordinates.json')
        with open(coords_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç: {e}")
        return {}

def get_coordinates(region_name, coordinates_dict):
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞"""
    if not region_name:
        return None
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if region_name in coordinates_dict:
        coords = coordinates_dict[region_name]
        return {"lat": coords["lat"], "lng": coords["lng"]}
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    for region, coords in coordinates_dict.items():
        if region_name.lower() in region.lower() or region.lower() in region_name.lower():
            return {"lat": coords["lat"], "lng": coords["lng"]}
    
    return None

def load_data_to_postgres():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –≤ PostgreSQL"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    database_url = os.getenv("DATABASE_URL", "postgresql://socfinder:test_password_123@localhost:5432/socfinder")
    logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ: {database_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–ø—É—â–µ–Ω PostgreSQL
    try:
        result = subprocess.run(
            ["docker-compose", "-f", "docker-compose.minimal.yml", "port", "postgres", "5432"],
            capture_output=True, text=True, check=True
        )
        port = result.stdout.strip().split(":")[-1]
        database_url = f"postgresql://socfinder:test_password_123@localhost:{port}/socfinder"
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {database_url}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ—Ä—Ç PostgreSQL: {e}")
    
    engine = create_engine(database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü...")
        Base.metadata.create_all(bind=engine)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ
        with engine.connect() as conn:
            result = conn.execute(text("SELECT COUNT(*) FROM projects"))
            count = result.scalar()
            if count > 0:
                logger.info(f"–í –±–∞–∑–µ —É–∂–µ –µ—Å—Ç—å {count} –ø—Ä–æ–µ–∫—Ç–æ–≤. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
                return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω–æ–≤...")
        coordinates_dict = load_coordinates()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(coordinates_dict)} —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º Excel —Ñ–∞–π–ª
        excel_path = os.path.join(os.path.dirname(__file__), '..', 'raw', 'data_114_pres_grants_v20250313.xlsx')
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞: {excel_path}")
        
        if not os.path.exists(excel_path):
            logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {excel_path}")
            return
        
        workbook = load_workbook(excel_path, read_only=True)
        sheet = workbook.active
        logger.info(f"–û—Ç–∫—Ä—ã—Ç –ª–∏—Å—Ç: {sheet.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = []
        for cell in sheet[1]:
            headers.append(cell.value)
        
        logger.info(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {headers[:5]}...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
        session = SessionLocal()
        
        try:
            projects_added = 0
            batch_size = 1000
            batch = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏
            for row_num, row in enumerate(sheet.iter_rows(min_row=2, values_only=True), 2):
                if row_num % 10000 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–æ–∫: {row_num}")
                
                try:
                    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –º–∞–ø–ø–∏–Ω–≥ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ Excel
                    name = str(row[0]) if row[0] else ""
                    contest = str(row[1]) if row[1] else ""
                    year = int(row[2]) if row[2] and str(row[2]).isdigit() else None
                    direction = str(row[3]) if row[3] else ""
                    region = str(row[5]) if row[5] else ""  # –ö–æ–ª–æ–Ω–∫–∞ 5
                    org = str(row[6]) if row[6] else ""     # –ö–æ–ª–æ–Ω–∫–∞ 6
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º winner (–∫–æ–ª–æ–Ω–∫–∞ 11)
                    winner = False
                    if len(row) > 11 and row[11] is not None:
                        winner_val = str(row[11]).lower().strip()
                        winner = winner_val in ['true', '1', '–¥–∞', '–ø–æ–±–µ–¥–∏—Ç–µ–ª—å', 'winner', '+']
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º money_req_grant (–∫–æ–ª–æ–Ω–∫–∞ 13)
                    money_req_grant = 0
                    if len(row) > 13 and row[13] is not None:
                        try:
                            money_val = row[13]
                            if isinstance(money_val, (int, float)):
                                money_req_grant = int(money_val)
                            else:
                                money_str = str(money_val).replace(' ', '').replace(',', '')
                                if money_str.replace('.', '').isdigit():
                                    money_req_grant = int(float(money_str))
                        except:
                            money_req_grant = 0
                    
                    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç
                    project = Project(
                        name=name,
                        contest=contest,
                        year=year,
                        direction=direction,
                        region=region,
                        org=org,
                        winner=winner,
                        money_req_grant=money_req_grant,
                        coordinates=get_coordinates(region, coordinates_dict)
                    )
                    
                    batch.append(project)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏
                    if len(batch) >= batch_size:
                        session.add_all(batch)
                        session.commit()
                        projects_added += len(batch)
                        batch = []
                        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–µ–∫—Ç–æ–≤: {projects_added}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ {row_num}: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–µ–∫—Ç—ã
            if batch:
                session.add_all(batch)
                session.commit()
                projects_added += len(batch)
            
            logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            logger.info(f"–í—Å–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {projects_added}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
            session.rollback()
            raise
        finally:
            session.close()
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def create_database_dump():
    """–°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üì¶ –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    dump_dir = os.path.join(os.path.dirname(__file__), '..', 'dumps')
    os.makedirs(dump_dir, exist_ok=True)
    
    dump_path = os.path.join(dump_dir, 'socfinder_dump.sql')
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pg_dump –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞
        cmd = [
            'docker-compose',
            '-f', 'docker-compose.minimal.yml',
            'exec',
            '-T',
            'postgres',
            'pg_dump',
            '-U', 'socfinder',
            '--clean',
            '--if-exists',
            '--format=c',
            'socfinder'
        ]
        
        with open(dump_path, 'wb') as f:
            subprocess.run(cmd, stdout=f, check=True)
        
        logger.info(f"‚úÖ –î–∞–º–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: {dump_path}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–º–ø–∞
        dump_size = os.path.getsize(dump_path) / (1024 * 1024)  # –≤ –ú–ë
        logger.info(f"üìä –†–∞–∑–º–µ—Ä –¥–∞–º–ø–∞: {dump_size:.2f} –ú–ë")
        
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∞–º–ø–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    start_time = time.time()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    load_data_to_postgres()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø
    create_database_dump()
    
    end_time = time.time()
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

if __name__ == "__main__":
    main()
