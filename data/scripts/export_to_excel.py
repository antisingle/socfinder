#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ Excel
"""

import psycopg2
import psycopg2.extras
import pandas as pd
import logging
from datetime import datetime
from typing import Dict, List, Optional
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('export_to_excel.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class ExcelExporter:
    def __init__(self, host: str = None, port: int = 5432, 
                 database: str = "socfinder", user: str = "socfinder_user", 
                 password: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä–∞
        
        Args:
            host: —Ö–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ None, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            port: –ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            database: –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            user: –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ø–∞—Ä–æ–ª—å (–µ—Å–ª–∏ None, –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        """
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–æ—Å—Ç: –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω–æ –≤ Docker - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
        if host is None:
            import os
            if os.path.exists('/.dockerenv'):
                self.host = "postgres"  # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ –≤ docker-compose
            else:
                self.host = "localhost"
        else:
            self.host = host
            
        self.port = port
        self.database = database
        self.user = user
        self.password = password or "Ant1$1ngleoe"  # –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
        
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
        try:
            connection = psycopg2.connect(
                host=self.host,
                port=self.port,
                database=self.database,
                user=self.user,
                password=self.password
            )
            return connection
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return None
    
    def test_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            if conn:
                with conn.cursor() as cursor:
                    cursor.execute("SELECT version();")
                    version = cursor.fetchone()
                    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ: {version[0]}")
                    conn.close()
                    return True
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def get_projects_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"""
        try:
            conn = self.get_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
                SELECT 
                    id, req_num, name, contest, year, direction, 
                    date_req, region, org, inn, ogrn,
                    implem_start, implem_end, winner, rate,
                    money_req_grant, cofunding, total_money,
                    description, goal, tasks, soc_signif, pj_geo, target_groups,
                    address, web_site, link, okato, oktmo, level
                FROM projects 
                ORDER BY id
            """
            
            df = pd.read_sql_query(query, conn)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            conn.close()
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {e}")
            return pd.DataFrame()
    
    def get_problems_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º"""
        try:
            conn = self.get_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
                SELECT 
                    p.id,
                    p.grant_id,
                    p.problem_text,
                    pr.name as project_name,
                    pr.region,
                    pr.year,
                    pr.direction
                FROM problems p
                JOIN projects pr ON p.grant_id = pr.req_num
                ORDER BY p.grant_id, p.id
            """
            
            df = pd.read_sql_query(query, conn)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º")
            conn.close()
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: {e}")
            return pd.DataFrame()
    
    def get_solutions_data(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π"""
        try:
            conn = self.get_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
                SELECT 
                    s.id,
                    s.grant_id,
                    s.solution_text,
                    pr.name as project_name,
                    pr.region,
                    pr.year,
                    pr.direction
                FROM solutions s
                JOIN projects pr ON s.grant_id = pr.req_num
                ORDER BY s.grant_id, s.id
            """
            
            df = pd.read_sql_query(query, conn)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(df)} —Ä–µ—à–µ–Ω–∏–π")
            conn.close()
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π: {e}")
            return pd.DataFrame()
    
    def get_problems_solutions_summary(self) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º"""
        try:
            conn = self.get_connection()
            if not conn:
                return pd.DataFrame()
            
            query = """
                SELECT 
                    pr.id as project_id,
                    pr.req_num,
                    pr.name as project_name,
                    pr.region,
                    pr.year,
                    pr.direction,
                    pr.winner,
                    pr.total_money,
                    COUNT(DISTINCT p.id) as problems_count,
                    COUNT(DISTINCT s.id) as solutions_count,
                    STRING_AGG(DISTINCT p.problem_text, ' | ' ORDER BY p.problem_text) as problems_text,
                    STRING_AGG(DISTINCT s.solution_text, ' | ' ORDER BY s.solution_text) as solutions_text
                FROM projects pr
                LEFT JOIN problems p ON pr.id = p.grant_id
                LEFT JOIN solutions s ON pr.id = s.grant_id
                GROUP BY pr.id, pr.req_num, pr.name, pr.region, pr.year, pr.direction, pr.winner, pr.total_money
                HAVING COUNT(DISTINCT p.id) > 0 OR COUNT(DISTINCT s.id) > 0
                ORDER BY pr.id
            """
            
            df = pd.read_sql_query(query, conn)
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è {len(df)} –ø—Ä–æ–µ–∫—Ç–æ–≤")
            conn.close()
            return df
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã: {e}")
            return pd.DataFrame()
    
    def export_to_excel(self, output_dir: str = "exports") -> str:
        """
        –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π –≤ Excel —Ñ–∞–π–ª
        
        Args:
            output_dir: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            
        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            os.makedirs(output_dir, exist_ok=True)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"socfinder_problems_solutions_{timestamp}.xlsx"
            filepath = os.path.join(output_dir, filename)
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ—à–µ–Ω–∏—è
            logger.info("üìä –ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π...")
            
            problems_df = self.get_problems_data()
            solutions_df = self.get_solutions_data()
            
            # –°–æ–∑–¥–∞–µ–º Excel writer
            with pd.ExcelWriter(filepath, engine='openpyxl') as writer:
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—Å—Ç—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏
                if not problems_df.empty:
                    problems_df.to_excel(writer, sheet_name='–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ_–ø—Ä–æ–±–ª–µ–º—ã', index=False)
                    logger.info("‚úÖ –õ–∏—Å—Ç '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ_–ø—Ä–æ–±–ª–µ–º—ã' –∑–∞–ø–∏—Å–∞–Ω")
                
                if not solutions_df.empty:
                    solutions_df.to_excel(writer, sheet_name='–†–µ—à–µ–Ω–∏—è', index=False)
                    logger.info("‚úÖ –õ–∏—Å—Ç '–†–µ—à–µ–Ω–∏—è' –∑–∞–ø–∏—Å–∞–Ω")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats_data = {
                    '–ú–µ—Ç—Ä–∏–∫–∞': [
                        '–í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º',
                        '–í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π',
                        '–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'
                    ],
                    '–ó–Ω–∞—á–µ–Ω–∏–µ': [
                        len(problems_df),
                        len(solutions_df),
                        datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                    ]
                }
                
                stats_df = pd.DataFrame(stats_data)
                stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
                logger.info("‚úÖ –õ–∏—Å—Ç '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' –∑–∞–ø–∏—Å–∞–Ω")
            
            logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {filepath}")
            return filepath
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")
            return ""
    
    def get_database_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = self.get_connection()
            if not conn:
                return {}
            
            with conn.cursor() as cursor:
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤
                cursor.execute("SELECT COUNT(*) FROM projects")
                total_projects = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
                cursor.execute("SELECT COUNT(DISTINCT grant_id) FROM problems")
                projects_with_problems = cursor.fetchone()[0]
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å —Ä–µ—à–µ–Ω–∏—è–º–∏
                cursor.execute("SELECT COUNT(DISTINCT grant_id) FROM solutions")
                projects_with_solutions = cursor.fetchone()[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–±–ª–µ–º
                cursor.execute("SELECT COUNT(*) FROM problems")
                total_problems = cursor.fetchone()[0]
                
                # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–∏–π
                cursor.execute("SELECT COUNT(*) FROM solutions")
                total_solutions = cursor.fetchone()[0]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
                cursor.execute("SELECT region, COUNT(*) FROM projects GROUP BY region ORDER BY COUNT(*) DESC LIMIT 10")
                top_regions = cursor.fetchall()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º
                cursor.execute("SELECT year, COUNT(*) FROM projects GROUP BY year ORDER BY year")
                years_stats = cursor.fetchall()
                
                stats = {
                    'total_projects': total_projects,
                    'projects_with_problems': projects_with_problems,
                    'projects_with_solutions': projects_with_solutions,
                    'total_problems': total_problems,
                    'total_solutions': total_solutions,
                    'top_regions': top_regions,
                    'years_stats': years_stats
                }
                
                conn.close()
                return stats
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    exporter = ExcelExporter()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not exporter.test_connection():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    logger.info("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π...")
    stats = exporter.get_database_stats()
    
    if stats:
        logger.info(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {stats.get('total_problems', 0)}")
        logger.info(f"   –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {stats.get('total_solutions', 0)}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ Excel
    logger.info("üì§ –ù–∞—á–∏–Ω–∞—é —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π –≤ Excel...")
    output_file = exporter.export_to_excel()
    
    if output_file:
        logger.info(f"üéâ –≠–∫—Å–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        logger.info(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(output_file) / (1024 * 1024)  # –≤ –ú–ë
        logger.info(f"üìè –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")
    else:
        logger.error("‚ùå –≠–∫—Å–ø–æ—Ä—Ç –Ω–µ —É–¥–∞–ª—Å—è")

if __name__ == "__main__":
    main()
