#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ollama –∏ PostgreSQL
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç 1 —Ä–µ–∞–ª—å–Ω—É—é –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from postgres_manager import PostgresManager
from ollama_analyzer import OllamaAnalyzer
import json
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_single_grant_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–∏"""
    
    logger.info("üöÄ –ù–ê–ß–ò–ù–ê–Æ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò OLLAMA + POSTGRESQL")
    logger.info("=" * 60)
    
    # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    logger.info("1Ô∏è‚É£ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    db_manager = PostgresManager()
    ollama_analyzer = OllamaAnalyzer()
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    logger.info("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
    
    if not db_manager.test_connection():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
        return False
    
    if not ollama_analyzer.test_connection():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ollama")
        return False
    
    logger.info("‚úÖ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # 3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    logger.info("3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î...")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∑–∞—è–≤–∫—É
    grants = db_manager.get_grants_batch(1, 1)
    if not grants:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –∏–∑ –ë–î")
        return False
    
    test_grant = grants[0]
    logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞: {test_grant.get('name', 'N/A')}")
    logger.info(f"   ID: {test_grant.get('id')}")
    logger.info(f"   req_num: {test_grant.get('req_num')}")
    logger.info(f"   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {test_grant.get('direction')}")
    
    # 4. –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ LLM
    logger.info("4Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ LLM...")
    
    start_time = time.time()
    analysis_result = ollama_analyzer.analyze_grant(test_grant)
    analysis_time = time.time() - start_time
    
    if not analysis_result:
        logger.error("‚ùå LLM –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É")
        return False
    
    logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {analysis_time:.2f} —Å–µ–∫")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    logger.info("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞...")
    
    logger.info(f"   –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω–æ: {len(analysis_result.get('problems', []))}")
    for i, problem in enumerate(analysis_result.get('problems', []), 1):
        logger.info(f"     {i}. {problem[:100]}...")
    
    logger.info(f"   –†–µ—à–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {len(analysis_result.get('solutions', []))}")
    for i, solution in enumerate(analysis_result.get('solutions', []), 1):
        logger.info(f"     {i}. {solution[:100]}...")
    
    logger.info(f"   –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {analysis_result.get('summary', 'N/A')[:100]}...")
    
    # 6. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    logger.info("6Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î...")
    
    if db_manager.save_analysis_results([analysis_result]):
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î")
        return False
    
    # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    logger.info("7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    summary = db_manager.get_analysis_summary()
    logger.info(f"üìä –°–≤–æ–¥–∫–∞ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞:")
    logger.info(f"   –í—Å–µ–≥–æ –≥—Ä–∞–Ω—Ç–æ–≤: {summary.get('total_grants', 0)}")
    logger.info(f"   –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {summary.get('analyzed_grants', 0)}")
    logger.info(f"   –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {summary.get('total_problems', 0)}")
    logger.info(f"   –í—Å–µ–≥–æ —Ä–µ—à–µ–Ω–∏–π: {summary.get('total_solutions', 0)}")
    
    # 8. –¢–µ—Å—Ç SQL –∑–∞–ø—Ä–æ—Å–æ–≤
    logger.info("8Ô∏è‚É£ –¢–µ—Å—Ç SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–≤—è–∑–µ–π...")
    
    grant_id = analysis_result.get('grant_id')
    if grant_id:
        logger.info(f"   –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≥—Ä–∞–Ω—Ç–∞: {grant_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        problems = db_manager.get_connection()
        if problems:
            with problems.cursor() as cursor:
                cursor.execute("SELECT problem_text FROM problems WHERE grant_id = %s", (grant_id,))
                saved_problems = cursor.fetchall()
                logger.info(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(saved_problems)}")
            
            problems.close()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—à–µ–Ω–∏—è
        solutions = db_manager.get_connection()
        if solutions:
            with solutions.cursor() as cursor:
                cursor.execute("SELECT solution_text FROM solutions WHERE grant_id = %s", (grant_id,))
                saved_solutions = cursor.fetchall()
                logger.info(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–π: {len(saved_solutions)}")
            
            solutions.close()
    
    logger.info("=" * 60)
    logger.info("üéâ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù!")
    logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {analysis_time:.2f} —Å–µ–∫")
    logger.info(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –≥—Ä–∞–Ω—Ç–æ–≤: 1")
    
    return True

if __name__ == "__main__":
    import time
    success = test_single_grant_analysis()
    sys.exit(0 if success else 1)
