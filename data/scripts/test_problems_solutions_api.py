#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API endpoints –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π
–ó–∞–ø—É—Å–∫: python test_problems_solutions_api.py
"""

import requests
import json
import time
from typing import Dict, List, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8001"
TEST_TIMEOUT = 10  # —Å–µ–∫—É–Ω–¥—ã

def test_api_endpoint(url: str, method: str = "GET", data: Dict = None) -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoint –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    try:
        start_time = time.time()
        
        if method == "GET":
            response = requests.get(url, timeout=TEST_TIMEOUT)
        elif method == "POST":
            response = requests.post(url, json=data, timeout=TEST_TIMEOUT)
        else:
            return {"error": f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {method}"}
        
        response_time = time.time() - start_time
        
        result = {
            "url": url,
            "method": method,
            "status_code": response.status_code,
            "response_time": round(response_time, 3),
            "success": response.status_code == 200,
            "data_size": len(response.content) if response.content else 0
        }
        
        if response.status_code == 200:
            try:
                json_data = response.json()
                result["data_count"] = len(json_data) if isinstance(json_data, list) else 1
                result["sample_data"] = json_data[:2] if isinstance(json_data, list) and len(json_data) > 0 else json_data
            except json.JSONDecodeError:
                result["error"] = "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JSON"
        else:
            result["error"] = response.text[:200] if response.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏"
            
        return result
        
    except requests.exceptions.Timeout:
        return {"error": f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ ({TEST_TIMEOUT}—Å)", "url": url}
    except requests.exceptions.ConnectionError:
        return {"error": "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", "url": url}
    except Exception as e:
        return {"error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "url": url}

def test_problems_api() -> List[Dict[str, Any]]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints –¥–ª—è –ø—Ä–æ–±–ª–µ–º"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–±–ª–µ–º...")
    
    tests = [
        {"url": f"{API_BASE_URL}/api/problems", "method": "GET"},
        {"url": f"{API_BASE_URL}/api/problems/count", "method": "GET"},
        {"url": f"{API_BASE_URL}/api/problems/search?query=—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è", "method": "GET"},
    ]
    
    results = []
    for test in tests:
        result = test_api_endpoint(test["url"], test["method"])
        results.append(result)
        
        if result["success"]:
            print(f"‚úÖ {test['url']} - {result['response_time']}—Å")
        else:
            print(f"‚ùå {test['url']} - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    return results

def test_solutions_api() -> List[Dict[str, Any]]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API endpoints –¥–ª—è —Ä–µ—à–µ–Ω–∏–π"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —Ä–µ—à–µ–Ω–∏–π...")
    
    tests = [
        {"url": f"{API_BASE_URL}/api/solutions", "method": "GET"},
        {"url": f"{API_BASE_URL}/api/solutions/count", "method": "GET"},
        {"url": f"{API_BASE_URL}/api/solutions/search?query=—Ä–µ—à–µ–Ω–∏–µ", "method": "GET"},
        {
            "url": f"{API_BASE_URL}/api/solutions/by-grants", 
            "method": "POST", 
            "data": {"grant_ids": ["25-1-008623", "15-2-001234"]}
        },
    ]
    
    results = []
    for test in tests:
        result = test_api_endpoint(test["url"], test["method"], test.get("data"))
        results.append(result)
        
        if result["success"]:
            print(f"‚úÖ {test['url']} - {result['response_time']}—Å")
        else:
            print(f"‚ùå {test['url']} - {result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    return results

def test_integration() -> Dict[str, Any]:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
    problems_response = requests.get(f"{API_BASE_URL}/api/problems", timeout=TEST_TIMEOUT)
    if problems_response.status_code != 200:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}
    
    problems = problems_response.json()
    if not problems:
        return {"error": "–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 grant_id –¥–ª—è —Ç–µ—Å—Ç–∞
    test_grant_ids = list(set([p["grant_id"] for p in problems[:3]]))
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —ç—Ç–∏—Ö –≥—Ä–∞–Ω—Ç–æ–≤
    solutions_response = requests.post(
        f"{API_BASE_URL}/api/solutions/by-grants",
        json={"grant_ids": test_grant_ids},
        timeout=TEST_TIMEOUT
    )
    
    if solutions_response.status_code != 200:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"}
    
    solutions = solutions_response.json()
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–≤—è–∑–∏
    problem_grant_ids = set(p["grant_id"] for p in problems)
    solution_grant_ids = set(s["grant_id"] for s in solutions)
    
    # –í—Å–µ grant_id –∏–∑ —Ä–µ—à–µ–Ω–∏–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –ø—Ä–æ–±–ª–µ–º–∞—Ö
    orphaned_solutions = solution_grant_ids - problem_grant_ids
    
    result = {
        "problems_count": len(problems),
        "solutions_count": len(solutions),
        "unique_grant_ids_in_problems": len(problem_grant_ids),
        "unique_grant_ids_in_solutions": len(solution_grant_ids),
        "test_grant_ids": test_grant_ids,
        "orphaned_solutions": list(orphaned_solutions),
        "integration_success": len(orphaned_solutions) == 0
    }
    
    if result["integration_success"]:
        print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: {len(problems)} –ø—Ä–æ–±–ª–µ–º, {len(solutions)} —Ä–µ—à–µ–Ω–∏–π")
    else:
        print(f"‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {len(orphaned_solutions)} —Ä–µ—à–µ–Ω–∏–π –±–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–±–ª–µ–º")
    
    return result

def print_summary(problems_results: List[Dict], solutions_results: List[Dict], integration_result: Dict):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º"""
    print("\n" + "="*60)
    print("üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–±–ª–µ–º–∞–º
    problems_success = sum(1 for r in problems_results if r["success"])
    problems_total = len(problems_results)
    print(f"üîç API –ø—Ä–æ–±–ª–µ–º: {problems_success}/{problems_total} —É—Å–ø–µ—à–Ω–æ")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—è–º
    solutions_success = sum(1 for r in solutions_results if r["success"])
    solutions_total = len(solutions_results)
    print(f"üîç API —Ä–µ—à–µ–Ω–∏–π: {solutions_success}/{solutions_total} —É—Å–ø–µ—à–Ω–æ")
    
    # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    if "error" not in integration_result:
        print(f"üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if integration_result['integration_success'] else '‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã'}")
    else:
        print(f"üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: ‚ùå {integration_result['error']}")
    
    # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
    all_results = problems_results + solutions_results
    successful_results = [r for r in all_results if r["success"]]
    
    if successful_results:
        avg_response_time = sum(r["response_time"] for r in successful_results) / len(successful_results)
        print(f"‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.3f}—Å")
        
        max_response_time = max(r["response_time"] for r in successful_results)
        print(f"‚è±Ô∏è  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {max_response_time:.3f}—Å")
    
    # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    
    if problems_success == problems_total and solutions_success == solutions_total:
        print("‚úÖ –í—Å–µ API endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        if "integration_success" in integration_result and integration_result["integration_success"]:
            print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ø—Ä–æ–±–ª–µ–º–∞–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å API endpoints - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞")
    
    if successful_results:
        slow_endpoints = [r for r in successful_results if r["response_time"] > 1.0]
        if slow_endpoints:
            print(f"‚ö†Ô∏è  {len(slow_endpoints)} endpoints —Ä–∞–±–æ—Ç–∞—é—Ç –º–µ–¥–ª–µ–Ω–Ω–æ (>1—Å)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ—à–µ–Ω–∏–π")
    print(f"üåê API —Å–µ—Ä–≤–µ—Ä: {API_BASE_URL}")
    print(f"‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: {TEST_TIMEOUT}—Å")
    print("-" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ–±–ª–µ–º
        problems_results = test_problems_api()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Ä–µ—à–µ–Ω–∏–π
        solutions_results = test_solutions_api()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration_result = test_integration()
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        print_summary(problems_results, solutions_results, integration_result)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        results = {
            "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
            "api_base_url": API_BASE_URL,
            "problems_results": problems_results,
            "solutions_results": solutions_results,
            "integration_result": integration_result
        }
        
        with open("api_test_results.json", "w", encoding="utf-8") as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ api_test_results.json")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()
