services:
  postgres:
    image: postgres:15-alpine  # Более легкая версия
    environment:
      - POSTGRES_DB=socfinder
      - POSTGRES_USER=socfinder
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-socfinder_minimal_2025}
      # Оптимизация для 1GB RAM
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"  # Экспортируем порт наружу
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U socfinder"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - socfinder_network
    # Ограничение памяти для PostgreSQL
    deploy:
      resources:
        limits:
          memory: 400M
        reservations:
          memory: 200M
    command: >
      postgres
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.7
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=2MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://socfinder:${POSTGRES_PASSWORD:-socfinder_minimal_2025}@postgres:5432/socfinder
      - ENVIRONMENT=production
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./data:/app/data
    networks:
      - socfinder_network
    # Ограничение памяти для Backend
    deploy:
      resources:
        limits:
          memory: 200M
        reservations:
          memory: 100M

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://nginx/api
      - NODE_OPTIONS=--max_old_space_size=128  # Ограничение памяти для Node.js
    restart: unless-stopped
    networks:
      - socfinder_network
    # Ограничение памяти для Frontend
    deploy:
      resources:
        limits:
          memory: 150M
        reservations:
          memory: 80M

  nginx:
    image: nginx:alpine  # Легкая версия
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.minimal.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - socfinder_network
    # Ограничение памяти для Nginx
    deploy:
      resources:
        limits:
          memory: 50M
        reservations:
          memory: 20M

volumes:
  postgres_data:

networks:
  socfinder_network:
    driver: bridge
